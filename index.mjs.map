{"version":3,"file":"index.mjs","sources":["../lib/primitive.js","../lib/object.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having a value which is a triangular number.\n*\n* ## Notes\n*\n* -   Return values are not reliable for numbers greater than `1125899906842624`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having a value which is a triangular number\n*\n* @example\n* var bool = isTriangularNumber( 36.0 );\n* // returns true\n*\n* @example\n* var bool = isTriangularNumber( new Number( 36.0 ) );\n* // returns false\n*/\nfunction isTriangularNumber( value ) {\n\tvar n;\n\tvar x;\n\tif ( !isInteger( value ) ) {\n\t\treturn false;\n\t}\n\tx = ( 8.0*value ) + 1.0;\n\tn = floor( sqrt( x ) + 0.5 );\n\treturn n*n === x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = isTriangularNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isInteger = require( '@stdlib/assert-is-integer' ).isObject;\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a value which is a triangular number.\n*\n* ## Notes\n*\n* -   Return values are not reliable for numbers greater than `1125899906842624`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a value which is a triangular number\n*\n* @example\n* var bool = isTriangularNumber( 36.0 );\n* // returns false\n*\n* @example\n* var bool = isTriangularNumber( new Number( 36.0 ) );\n* // returns true\n*/\nfunction isTriangularNumber( value ) {\n\tvar n;\n\tvar x;\n\tif ( !isInteger( value ) ) {\n\t\treturn false;\n\t}\n\tx = ( 8.0*value.valueOf() ) + 1.0;\n\tn = floor( sqrt( x ) + 0.5 );\n\treturn n*n === x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = isTriangularNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPrimitive = require( './primitive.js' );\nvar isObject = require( './object.js' );\n\n\n// MAIN //\n\n/**\n* Tests if a value is a triangular number.\n*\n* ## Notes\n*\n* -   Return values are not reliable for numbers greater than `1125899906842624`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a triangular number\n*\n* @example\n* var bool = isTriangularNumber( 36.0 );\n* // returns true\n*\n* @example\n* var bool = isTriangularNumber( new Number( 36.0 ) );\n* // returns true\n*\n* @example\n* var bool = isTriangularNumber( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isTriangularNumber( -5.0 );\n* // returns false\n*\n* @example\n* var bool = isTriangularNumber( null );\n* // returns false\n*/\nfunction isTriangularNumber( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isTriangularNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a triangular number.\n*\n* @module @stdlib/assert-is-triangular-number\n*\n* @example\n* var isTriangularNumber = require( '@stdlib/assert-is-triangular-number' );\n*\n* var bool = isTriangularNumber( 36.0 );\n* // returns true\n*\n* bool = isTriangularNumber( new Number( 36.0 ) );\n* // returns true\n*\n* bool = isTriangularNumber( 3.14 );\n* // returns false\n*\n* bool = isTriangularNumber( -5.0 );\n* // returns false\n*\n* bool = isTriangularNumber( null );\n* // returns false\n*\n* @example\n* var isTriangularNumber = require( '@stdlib/assert-is-triangular-number' ).isPrimitive;\n*\n* var bool = isTriangularNumber( 36.0 );\n* // returns true\n*\n* bool = isTriangularNumber( new Number( 36.0 ) );\n* // returns false\n*\n* @example\n* var isTriangularNumber = require( '@stdlib/assert-is-triangular-number' ).isObject;\n*\n* var bool = isTriangularNumber( 36.0 );\n* // returns false\n*\n* bool = isTriangularNumber( new Number( 36.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isTriangularNumber = require( './main.js' );\nvar isPrimitive = require( './primitive.js' );\nvar isObject = require( './object.js' );\n\n\n// MAIN //\n\nsetReadOnly( isTriangularNumber, 'isPrimitive', isPrimitive );\nsetReadOnly( isTriangularNumber, 'isObject', isObject );\n\n\n// EXPORTS //\n\nmodule.exports = isTriangularNumber;\n"],"names":["isInteger","require$$0","isPrimitive","sqrt","require$$1","floor","require$$2","primitive","value","n","x","isObject","object","valueOf","setReadOnly","isTriangularNumber","require$$3","lib"],"mappings":";;2XAsBA,IAAIA,EAAYC,EAAuCC,YACnDC,EAAOC,EACPC,EAAQC,EAqCZ,IAAAC,EAdA,SAA6BC,GAC5B,IAAIC,EACAC,EACJ,QAAMV,EAAWQ,KAIjBC,EAAIJ,EAAOF,EADXO,EAAM,EAAIF,EAAU,GACG,KACdC,IAAMC,GCjCZV,EAAYC,EAAuCU,SACnDR,EAAOC,EACPC,EAAQC,EAqCZ,IAAAM,EAdA,SAA6BJ,GAC5B,IAAIC,EACAC,EACJ,QAAMV,EAAWQ,KAGjBE,EAAM,EAAIF,EAAMK,UAAc,GAC9BJ,EAAIJ,EAAOF,EAAMO,GAAM,KACdD,IAAMC,ICjCZR,EAAcD,EACdU,EAAWP,EA0Cf,ICDAU,EAAAb,EACAc,EDPA,SAA6BP,GAC5B,OAASN,EAAaM,IAAWG,EAAUH,ICO5CN,EAAAI,EACAK,EAAAK,EAKAF,EAAAC,EAAA,cAAAb,GACAY,EAAAC,EAAA,WAAAJ,GAKA,IAAAM,EAAAF"}